
//  C++ program that calls a function which generates Hermite polynomials in a specified free variable. 
#include <iostream>
#include <ginac/ginac.h>
using namespace std;
using namespace GiNaC;

ex HermitePoly(const symbol & x, int n)
{
    ex HKer=exp(-pow(x, 2));
    // uses the identity H_n(x) == (-1)^n exp(x^2) (d/dx)^n exp(-x^2)
    return normal(pow(-1, n) * diff(HKer, x, n) / HKer);
}

int main()
{
    symbol z("z");

    for (int i=0; i<6; ++i)
        cout << "H_" << i << "(z) == " << HermitePoly(z,i) << endl;

    return 0;
}




There are a couple of ways to construct matrices, with or without preset elements. The constructor

matrix::matrix(unsigned r, unsigned c);

The easiest way to create a matrix is using an initializer list of initializer lists, all of the same size:

{
    matrix m = {{1, -a},
                {a,  1}};
}

The function

ex lst_to_matrix(const lst & l);

constructs a matrix from a list of lists, each list representing a matrix row.


There is also a set of functions for creating some special types of matrices:

ex diag_matrix(const lst & l);
ex diag_matrix(initializer_list<ex> l);
ex unit_matrix(unsigned x);
ex unit_matrix(unsigned r, unsigned c);
ex symbolic_matrix(unsigned r, unsigned c, const string & base_name);
ex symbolic_matrix(unsigned r, unsigned c, const string & base_name,
                   const string & tex_base_name);


The function sub_matrix() takes a row offset r and a column offset c and takes a block of nr rows and nc columns. The function reduced_matrix() has two integer arguments that specify which row and column to remove:

{
    matrix m = {{11, 12, 13},
                {21, 22, 23},
                {31, 32, 33}};
    cout << reduced_matrix(m, 1, 1) << endl;
    // -> [[11,13],[31,33]]
    cout << sub_matrix(m, 1, 2, 1, 2) << endl;
    // -> [[22,23],[32,33]]
}


Here are a couple of examples for constructing matrices:

{
    symbol a("a"), b("b");

    matrix M = {{a, 0},
                {0, b}};
    cout << M << endl;
     // -> [[a,0],[0,b]]

    matrix M2(2, 2);
    M2(0, 0) = a;
    M2(1, 1) = b;
    cout << M2 << endl;
     // -> [[a,0],[0,b]]

    cout << matrix(2, 2, lst{a, 0, 0, b}) << endl;
     // -> [[a,0],[0,b]]

    cout << lst_to_matrix(lst{lst{a, 0}, lst{0, b}}) << endl;
     // -> [[a,0],[0,b]]

    cout << diag_matrix(lst{a, b}) << endl;
     // -> [[a,0],[0,b]]

    cout << unit_matrix(3) << endl;
     // -> [[1,0,0],[0,1,0],[0,0,1]]

    cout << symbolic_matrix(2, 3, "x") << endl;
     // -> [[x00,x01,x02],[x10,x11,x12]]
}


The method matrix::is_zero_matrix() returns true only if all entries of the matrix are zeros. There is also method ex::is_zero_matrix() which returns true only if the expression is zero or a zero matrix.

There are three ways to do arithmetic with matrices. The first (and most direct one) is to use the methods provided by the matrix class:

matrix matrix::add(const matrix & other) const;
matrix matrix::sub(const matrix & other) const;
matrix matrix::mul(const matrix & other) const;
matrix matrix::mul_scalar(const ex & other) const;
matrix matrix::pow(const ex & expn) const;
matrix matrix::transpose() const;

All of these methods return the result as a new matrix object. Here is an example that calculates A*B-2*C for three matrices A, B and C:

{
    matrix A = {{ 1, 2},
                { 3, 4}};
    matrix B = {{-1, 0},
                { 2, 1}};
    matrix C = {{ 8, 4},
                { 2, 1}};

    matrix result = A.mul(B).sub(C.mul_scalar(2));
    cout << result << endl;
     // -> [[-13,-6],[1,2]]
    ...
}

The second (and probably the most natural) way is to construct an expression containing matrices with the usual arithmetic operators and pow(). For efficiency reasons, expressions with sums, products and powers of matrices are not automatically evaluated in GiNaC. You have to call the method

ex ex::evalm() const;

to obtain the result:

{
    ...
    ex e = A*B - 2*C;
    cout << e << endl;
     // -> [[1,2],[3,4]]*[[-1,0],[2,1]]-2*[[8,4],[2,1]]
    cout << e.evalm() << endl;
     // -> [[-13,-6],[1,2]]
    ...
}

The non-commutativity of the product A*B in this example is automatically recognized by GiNaC. There is no need to use a special operator here. See Non-commutative objects, for more information about dealing with non-commutative expressions.

Finally, you can work with indexed matrices and call simplify_indexed() to perform the arithmetic:

{
    ...
    idx i(symbol("i"), 2), j(symbol("j"), 2), k(symbol("k"), 2);
    e = indexed(A, i, k) * indexed(B, k, j) - 2 * indexed(C, i, j);
    cout << e << endl;
     // -> -2*[[8,4],[2,1]].i.j+[[-1,0],[2,1]].k.j*[[1,2],[3,4]].i.k
    cout << e.simplify_indexed() << endl;
     // -> [[-13,-6],[1,2]].i.j
}

Using indices is most useful when working with rectangular matrices and one-dimensional vectors because you don’t have to worry about having to transpose matrices before multiplying them. See Indexed objects, for more information about using matrices with indices, and about indices in general.

The matrix class provides a couple of additional methods for computing determinants, traces, characteristic polynomials and ranks:

ex matrix::determinant(unsigned algo=determinant_algo::automatic) const;
ex matrix::trace() const;
ex matrix::charpoly(const ex & lambda) const;
unsigned matrix::rank(unsigned algo=solve_algo::automatic) const;

The optional ‘algo’ argument of determinant() and rank() functions allows to select between different algorithms for calculating the determinant and rank respectively. The asymptotic speed (as parametrized by the matrix size) can greatly differ between those algorithms, depending on the nature of the matrix’ entries. The possible values are defined in the flags.h header file. By default, GiNaC uses a heuristic to automatically select an algorithm that is likely (but not guaranteed) to give the result most quickly.

Linear systems can be solved with:

matrix matrix::solve(const matrix & vars, const matrix & rhs,
                     unsigned algo=solve_algo::automatic) const;

Assuming the matrix object this method is applied on is an m times n matrix, then vars must be a n times p matrix of symbolic indeterminates and rhs a m times p matrix. The returned matrix then has dimension n times p and in the case of an underdetermined system will still contain some of the indeterminates from vars. If the system is overdetermined, an exception is thrown.

To invert a matrix, use the method:

matrix matrix::inverse(unsigned algo=solve_algo::automatic) const;
